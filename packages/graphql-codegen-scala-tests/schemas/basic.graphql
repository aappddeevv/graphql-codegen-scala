schema {
  query: Query
}

type Query {
  helloworld: String!
  people: [People!]!
  peopleList(filter: String): [PersonAndAddress!]!
  getMessage(id: ID!): Message
  changeDirection(direction: Direction): Path
  getDie(numSides: Int): RandomDie
  companyList(filter: String): CompanyList
  test(items: [String]!): CompanyList
  testScalars: TestScalarsResult
}

type TestScalarsResult { 
  output: JSONObject
}

"""
Company list results.
"""
type CompanyList {
  count: Int!
  items: [Company!]!
}

type Path {
  direction: Direction
  message: String
}

type Mutation {
  createMessage(input: MessageInput): Message
  updateMessage(id: ID!, input: MessageInput): Message
  updateMessageNoInputType(
    id: ID!
    content: String
    author: String = "unknown"
  ): Message
  notifyOthers: String
}

type Message {
  id: ID!
  content: String
  author: String
}

"""
An input type called MessageInput. Great comment!
"""
input MessageInput {
  content: String
  author: String
}

interface PersonLike {
  id: ID!
  firstname: String
  lastname: String
}

type People implements PersonLike {
  id: ID!
  firstname: String
  lastname: String
}

type Company {
  id: ID!
  name: String!
  address: CompanyAddress
  numLocations: Int
}

enum Direction {
  NORTH
  EAST
  SOUTH
  WEST
}

type RandomDie {
  numSides: Int!
  rollOnce: Int!
  roll(numRolls: Int!): [Int]
}

"""
Something like an address.
"""
interface AddressLike {
  line1: String
  line2: String
  zip: String
  city: String
  state: String
  country: String
  numRooms: Int
}

type CompanyAddress implements AddressLike {
  id: ID!
  line1: String
  line2: String
  zip: String
  city: String
  state: String
  country: String
  numRooms: Int
}

type PersonAndAddress implements AddressLike & PersonLike {
  id: ID!
  firstname: String
  lastname: String
  line1: String
  line2: String
  zip: String
  city: String
  state: String
  country: String
  numRooms: Int

  notInEither: String
}

""" 
Test scalar generation support.
A type mapping must be added to the config to hande this
correctly.
"""
scalar JSONObject
